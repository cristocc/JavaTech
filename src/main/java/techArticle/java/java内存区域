https://github.com/Snailclimb/JavaGuide/blob/3965c02cc0f294b0bd3580df4868d5e396959e2e/Java%E7%9B%B8%E5%85%B3/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%8A%8AJava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E6%B8%85%E6%A5%9A%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.md


Memory Management in the JavaHotSpot™ Virtual Machine
http://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf

GC Roots
在 Java 中可以作为 GC Roots 的对象，主要包含以下几个：
所有被同步锁持有的对象，比如被 synchronize 持有的对象；
字符串常量池里的引用（String Table）；
类型为引用类型的静态变量；
虚拟机栈中引用对象；
本地方法栈中的引用对象。


知识扩展——类加载
类的生命周期会经历以下 7 个阶段：

加载阶段（Loading）
验证阶段（Verification）
准备阶段（Preparation）
解析阶段（Resolution）
初始化阶段（Initialization）
使用阶段（Using）
卸载阶段（Unloading）
其中验证、准备、解析 3 个阶段统称为连接（Linking）

1. 加载阶段
此阶段用于查到相应的类（通过类名进行查找）并将此类的字节流转换为方法区运行时的数据结构，然后再在内存中生成一个能代表此类的 java.lang.Class 对象，作为其他数据访问的入口。
小贴士：需要注意的是加载阶段和连接阶段的部分动作有可能是交叉执行的，比如一部分字节码文件格式的验证，在加载阶段还未完成时就已经开始验证了。

2. 验证阶段
此步骤主要是为了验证字节码的安全性，如果不做安全校验的话可能会载入非安全或有错误的字节码，从而导致系统崩溃，它是 JVM 自我保护的一项重要举措。
验证的主要动作大概有以下几个：
文件格式校验包括常量池中的常量类型、Class 文件的各个部分是否被删除或被追加了其他信息等；
元数据校验包括父类正确性校验（检查父类是否有被 final 修饰）、抽象类校验等；
字节码校验，此步骤最为关键和复杂，主要用于校验程序中的语义是否合法且符合逻辑；
符号引用校验，对类自身以外比如常量池中的各种符号引用的信息进行匹配性校验。
3. 准备阶段
此阶段是用来初始化并为类中定义的静态变量分配内存的，这些静态变量会被分配到方法区上。
HotSpot 虚拟机在 JDK 1.7 之前都在方法区，而 JDK 1.8 之后此变量会随着类对象一起存放到 Java 堆中。

4. 解析阶段
此阶段主要是用来解析类、接口、字段及方法的，解析时会把符号引用替换成直接引用。
所谓的符号引用是指以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可；而直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。
符号引用和直接引用有一个重要的区别：使用符号引用时被引用的目标不一定已经加载到内存中；而使用直接引用时，引用的目标必定已经存在虚拟机的内存中了。

5. 初始化
初始化阶段 JVM 就正式开始执行类中编写的 Java 业务代码了。到这一步骤之后，类的加载过程就算正式完成了。